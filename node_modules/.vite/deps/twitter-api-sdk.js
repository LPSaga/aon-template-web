import {
  __commonJS
} from "./chunk-5FUTL2UF.js";

// browser-external:crypto
var require_crypto = __commonJS({
  "browser-external:crypto"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "crypto" has been externalized for browser compatibility. Cannot access "crypto.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/twitter-api-sdk/dist/utils.js
var require_utils = __commonJS({
  "node_modules/twitter-api-sdk/dist/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.basicAuthHeader = exports.buildQueryString = void 0;
    function buildQueryString(query) {
      return Object.entries(query).map(([key, value]) => key && value ? `${encodeURIComponent(key)}=${encodeURIComponent(value)}` : "").join("&");
    }
    exports.buildQueryString = buildQueryString;
    function basicAuthHeader(client_id, client_secret) {
      return `Basic ${Buffer.from(`${client_id}:${client_secret}`).toString("base64")}`;
    }
    exports.basicAuthHeader = basicAuthHeader;
  }
});

// node_modules/node-fetch/browser.js
var require_browser = __commonJS({
  "node_modules/node-fetch/browser.js"(exports, module) {
    "use strict";
    var getGlobal = function() {
      if (typeof self !== "undefined") {
        return self;
      }
      if (typeof window !== "undefined") {
        return window;
      }
      if (typeof global !== "undefined") {
        return global;
      }
      throw new Error("unable to locate global object");
    };
    var globalObject = getGlobal();
    module.exports = exports = globalObject.fetch;
    if (globalObject.fetch) {
      exports.default = globalObject.fetch.bind(globalObject);
    }
    exports.Headers = globalObject.Headers;
    exports.Request = globalObject.Request;
    exports.Response = globalObject.Response;
  }
});

// node_modules/abort-controller/browser.js
var require_browser2 = __commonJS({
  "node_modules/abort-controller/browser.js"(exports, module) {
    "use strict";
    var { AbortController, AbortSignal } = typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : (
      /* otherwise */
      void 0
    );
    module.exports = AbortController;
    module.exports.AbortSignal = AbortSignal;
    module.exports.default = AbortController;
  }
});

// node_modules/twitter-api-sdk/dist/request.js
var require_request = __commonJS({
  "node_modules/twitter-api-sdk/dist/request.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginate = exports.rest = exports.stream = exports.request = void 0;
    var node_fetch_1 = __importDefault(require_browser());
    var utils_1 = require_utils();
    var AbortController;
    if (!globalThis.AbortController) {
      AbortController = require_browser2();
    } else {
      AbortController = globalThis.AbortController;
    }
    async function fetchWithRetries(url, init, max_retries = 0) {
      const res = await (0, node_fetch_1.default)(url, init);
      if (res.status === 429 && max_retries > 0) {
        const rateLimitReset = Number(res.headers.get("x-rate-limit-reset"));
        const rateLimitRemaining = Number(res.headers.get("x-rate-limit-remaining"));
        const timeTillReset = rateLimitReset * 1e3 - Date.now();
        let timeToWait = 1e3;
        if (rateLimitRemaining === 0)
          timeToWait = timeTillReset;
        await new Promise((resolve) => setTimeout(resolve, timeToWait));
        return fetchWithRetries(url, init, max_retries - 1);
      }
      return res;
    }
    var TwitterResponseError = class extends Error {
      constructor(status, statusText, headers, error) {
        super();
        this.status = status;
        this.statusText = statusText;
        this.headers = Object.fromEntries(headers);
        this.error = error;
      }
    };
    async function request({ auth, endpoint, params: query = {}, request_body, method, max_retries, base_url = "https://api.twitter.com", headers, ...options }) {
      const url = new URL(base_url + endpoint);
      url.search = (0, utils_1.buildQueryString)(query);
      const includeBody = (method === "POST" || method === "PUT") && !!request_body;
      const authHeader = auth ? await auth.getAuthHeader(url.href, method) : void 0;
      const response = await fetchWithRetries(url.toString(), {
        headers: {
          ...includeBody ? { "Content-Type": "application/json; charset=utf-8" } : void 0,
          ...authHeader,
          ...headers
        },
        method,
        body: includeBody ? JSON.stringify(request_body) : void 0,
        // Timeout if you don't see any data for 60 seconds
        // https://developer.twitter.com/en/docs/tutorials/consuming-streaming-data
        timeout: 6e4,
        ...options
      }, max_retries);
      if (!response.ok) {
        const error = await response.json();
        throw new TwitterResponseError(response.status, response.statusText, response.headers, error);
      }
      return response;
    }
    exports.request = request;
    async function* stream(args) {
      const controller = new AbortController();
      const { body } = await request({
        signal: controller.signal,
        ...args
      });
      if (body === null)
        throw new Error("No response returned from stream");
      let buf = "";
      try {
        for await (const chunk of body) {
          buf += chunk.toString();
          const lines = buf.split("\r\n");
          for (const [i, line] of lines.entries()) {
            if (i === lines.length - 1) {
              buf = line;
            } else if (line)
              yield JSON.parse(line);
          }
        }
      } finally {
        controller.abort();
      }
    }
    exports.stream = stream;
    async function rest(args) {
      const response = await request(args);
      return response.json();
    }
    exports.rest = rest;
    function paginate(args) {
      return {
        then(resolve, reject) {
          return rest(args).then(resolve, reject);
        },
        async *[Symbol.asyncIterator]() {
          var _a;
          let ended = false;
          let pagination_token;
          while (!ended) {
            const response = await rest({
              ...args,
              params: {
                ...args.params,
                ...pagination_token && { pagination_token }
              }
            });
            yield response;
            pagination_token = (_a = response == null ? void 0 : response.meta) == null ? void 0 : _a.next_token;
            if (!pagination_token) {
              ended = true;
            }
          }
        }
      };
    }
    exports.paginate = paginate;
  }
});

// node_modules/twitter-api-sdk/dist/OAuth2User.js
var require_OAuth2User = __commonJS({
  "node_modules/twitter-api-sdk/dist/OAuth2User.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    var _OAuth2User_options;
    var _OAuth2User_code_verifier;
    var _OAuth2User_code_challenge;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OAuth2User = void 0;
    var crypto_1 = __importDefault(require_crypto());
    var utils_1 = require_utils();
    var request_1 = require_request();
    function sha256(buffer) {
      return crypto_1.default.createHash("sha256").update(buffer).digest();
    }
    function base64URLEncode(str) {
      return str.toString("base64").replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");
    }
    function processTokenResponse(token) {
      const { expires_in, ...rest } = token;
      return {
        ...rest,
        ...!!expires_in && {
          expires_at: Date.now() + expires_in * 1e3
        }
      };
    }
    var OAuth2User = class {
      constructor(options) {
        _OAuth2User_options.set(this, void 0);
        _OAuth2User_code_verifier.set(this, void 0);
        _OAuth2User_code_challenge.set(this, void 0);
        const { token, ...defaultOptions } = options;
        __classPrivateFieldSet(this, _OAuth2User_options, defaultOptions, "f");
        this.token = token;
      }
      /**
       * Refresh the access token
       */
      async refreshAccessToken() {
        var _a;
        const refresh_token = (_a = this.token) == null ? void 0 : _a.refresh_token;
        const { client_id, client_secret, request_options } = __classPrivateFieldGet(this, _OAuth2User_options, "f");
        if (!client_id) {
          throw new Error("client_id is required");
        }
        if (!refresh_token) {
          throw new Error("refresh_token is required");
        }
        const data = await (0, request_1.rest)({
          ...request_options,
          endpoint: `/2/oauth2/token`,
          params: {
            client_id,
            grant_type: "refresh_token",
            refresh_token
          },
          method: "POST",
          headers: {
            ...request_options == null ? void 0 : request_options.headers,
            "Content-type": "application/x-www-form-urlencoded",
            ...!!client_secret && {
              Authorization: (0, utils_1.basicAuthHeader)(client_id, client_secret)
            }
          }
        });
        const token = processTokenResponse(data);
        this.token = token;
        return { token };
      }
      /**
       * Check if an access token is expired
       */
      isAccessTokenExpired() {
        var _a, _b;
        const refresh_token = (_a = this.token) == null ? void 0 : _a.refresh_token;
        const expires_at = (_b = this.token) == null ? void 0 : _b.expires_at;
        if (!expires_at)
          return true;
        return !!refresh_token && expires_at <= Date.now() + 1e3;
      }
      /**
       * Request an access token
       */
      async requestAccessToken(code) {
        const { client_id, client_secret, callback, request_options } = __classPrivateFieldGet(this, _OAuth2User_options, "f");
        const code_verifier = __classPrivateFieldGet(this, _OAuth2User_code_verifier, "f");
        if (!client_id) {
          throw new Error("client_id is required");
        }
        if (!callback) {
          throw new Error("callback is required");
        }
        const params = {
          code,
          grant_type: "authorization_code",
          code_verifier,
          client_id,
          redirect_uri: callback
        };
        const data = await (0, request_1.rest)({
          ...request_options,
          endpoint: `/2/oauth2/token`,
          params,
          method: "POST",
          headers: {
            ...request_options == null ? void 0 : request_options.headers,
            "Content-type": "application/x-www-form-urlencoded",
            ...!!client_secret && {
              Authorization: (0, utils_1.basicAuthHeader)(client_id, client_secret)
            }
          }
        });
        const token = processTokenResponse(data);
        this.token = token;
        return { token };
      }
      /**
       * Revoke an access token
       */
      async revokeAccessToken() {
        var _a, _b;
        const { client_id, client_secret, request_options } = __classPrivateFieldGet(this, _OAuth2User_options, "f");
        const access_token = (_a = this.token) == null ? void 0 : _a.access_token;
        const refresh_token = (_b = this.token) == null ? void 0 : _b.refresh_token;
        if (!client_id) {
          throw new Error("client_id is required");
        }
        let params;
        if (!!access_token) {
          params = {
            token_type_hint: "access_token",
            token: access_token,
            client_id
          };
        } else if (!!refresh_token) {
          params = {
            token_type_hint: "refresh_token",
            token: refresh_token,
            client_id
          };
        } else {
          throw new Error("access_token or refresh_token required");
        }
        return (0, request_1.rest)({
          ...request_options,
          endpoint: `/2/oauth2/revoke`,
          params,
          method: "POST",
          headers: {
            ...request_options == null ? void 0 : request_options.headers,
            "Content-Type": "application/x-www-form-urlencoded",
            ...!!client_secret && {
              Authorization: (0, utils_1.basicAuthHeader)(client_id, client_secret)
            }
          }
        });
      }
      generateAuthURL(options) {
        const { client_id, callback, scopes } = __classPrivateFieldGet(this, _OAuth2User_options, "f");
        if (!callback)
          throw new Error("callback required");
        if (!scopes)
          throw new Error("scopes required");
        if (options.code_challenge_method === "s256") {
          const code_verifier = base64URLEncode(crypto_1.default.randomBytes(32));
          __classPrivateFieldSet(this, _OAuth2User_code_verifier, code_verifier, "f");
          __classPrivateFieldSet(this, _OAuth2User_code_challenge, base64URLEncode(sha256(code_verifier)), "f");
        } else {
          __classPrivateFieldSet(this, _OAuth2User_code_challenge, options.code_challenge, "f");
          __classPrivateFieldSet(this, _OAuth2User_code_verifier, options.code_challenge, "f");
        }
        const code_challenge = __classPrivateFieldGet(this, _OAuth2User_code_challenge, "f");
        const url = new URL("https://twitter.com/i/oauth2/authorize");
        url.search = (0, utils_1.buildQueryString)({
          ...options,
          client_id,
          scope: scopes.join(" "),
          response_type: "code",
          redirect_uri: callback,
          code_challenge_method: options.code_challenge_method || "plain",
          code_challenge
        });
        return url.toString();
      }
      async getAuthHeader() {
        var _a;
        if (!((_a = this.token) == null ? void 0 : _a.access_token))
          throw new Error("access_token is required");
        if (this.isAccessTokenExpired())
          await this.refreshAccessToken();
        return {
          Authorization: `Bearer ${this.token.access_token}`
        };
      }
    };
    exports.OAuth2User = OAuth2User;
    _OAuth2User_options = /* @__PURE__ */ new WeakMap(), _OAuth2User_code_verifier = /* @__PURE__ */ new WeakMap(), _OAuth2User_code_challenge = /* @__PURE__ */ new WeakMap();
  }
});

// node_modules/twitter-api-sdk/dist/OAuth2Bearer.js
var require_OAuth2Bearer = __commonJS({
  "node_modules/twitter-api-sdk/dist/OAuth2Bearer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OAuth2Bearer = void 0;
    var OAuth2Bearer = class {
      constructor(bearer_token) {
        this.bearer_token = bearer_token;
      }
      getAuthHeader() {
        return {
          Authorization: `Bearer ${this.bearer_token}`
        };
      }
    };
    exports.OAuth2Bearer = OAuth2Bearer;
  }
});

// node_modules/twitter-api-sdk/dist/auth.js
var require_auth = __commonJS({
  "node_modules/twitter-api-sdk/dist/auth.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_OAuth2User(), exports);
    __exportStar(require_OAuth2Bearer(), exports);
  }
});

// node_modules/twitter-api-sdk/dist/gen/openapi-types.js
var require_openapi_types = __commonJS({
  "node_modules/twitter-api-sdk/dist/gen/openapi-types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/twitter-api-sdk/dist/types.js
var require_types = __commonJS({
  "node_modules/twitter-api-sdk/dist/types.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AuthClient = void 0;
    var AuthClient = class {
    };
    exports.AuthClient = AuthClient;
    __exportStar(require_openapi_types(), exports);
  }
});

// node_modules/twitter-api-sdk/dist/gen/Client.js
var require_Client = __commonJS({
  "node_modules/twitter-api-sdk/dist/gen/Client.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _Client_auth;
    var _Client_defaultRequestOptions;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Client = void 0;
    var request_1 = require_request();
    var auth_1 = require_auth();
    var Client = class {
      constructor(auth, requestOptions) {
        _Client_auth.set(this, void 0);
        _Client_defaultRequestOptions.set(this, void 0);
        this.bookmarks = {
          /**
              * Bookmarks by User
              *
          
              * Returns Tweet objects that have been bookmarked by the requesting User
              * @param id - The ID of the authenticated source User for whom to return results.
              * @param params - The params for getUsersIdBookmarks
              * @param request_options - Customize the options for this request
              */
          getUsersIdBookmarks: (id, params = {}, request_options) => (0, request_1.paginate)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/${id}/bookmarks`,
            params,
            method: "GET"
          }),
          /**
              * Add Tweet to Bookmarks
              *
          
              * Adds a Tweet (ID in the body) to the requesting User's (in the path) bookmarks
              * @param id - The ID of the authenticated source User for whom to add bookmarks.
              * @param request_body - The request_body for postUsersIdBookmarks
              * @param request_options - Customize the options for this request
              */
          postUsersIdBookmarks: (id, request_body, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/${id}/bookmarks`,
            request_body,
            method: "POST"
          }),
          /**
              * Remove a bookmarked Tweet
              *
          
              * Removes a Tweet from the requesting User's bookmarked Tweets.
              * @param id - The ID of the authenticated source User whose bookmark is to be removed.
              * @param tweet_id - The ID of the Tweet that the source User is removing from bookmarks.
              * @param request_options - Customize the options for this request
              */
          usersIdBookmarksDelete: (id, tweet_id, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/${id}/bookmarks/${tweet_id}`,
            method: "DELETE"
          })
        };
        this.compliance = {
          /**
              * List Compliance Jobs
              *
          
              * Returns recent Compliance Jobs for a given job type and optional job status
              * @param params - The params for listBatchComplianceJobs
              * @param request_options - Customize the options for this request
              */
          listBatchComplianceJobs: (params, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/compliance/jobs`,
            params,
            method: "GET"
          }),
          /**
              * Create compliance job
              *
          
              * Creates a compliance for the given job type
              * @param request_body - The request_body for createBatchComplianceJob
              * @param request_options - Customize the options for this request
              */
          createBatchComplianceJob: (request_body, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/compliance/jobs`,
            request_body,
            method: "POST"
          }),
          /**
              * Get Compliance Job
              *
          
              * Returns a single Compliance Job by ID
              * @param id - The ID of the Compliance Job to retrieve.
              * @param params - The params for getBatchComplianceJob
              * @param request_options - Customize the options for this request
              */
          getBatchComplianceJob: (id, params = {}, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/compliance/jobs/${id}`,
            params,
            method: "GET"
          }),
          /**
              * Tweets Compliance stream
              *
          
              * Streams 100% of compliance data for Tweets
              * @param params - The params for getTweetsComplianceStream
              * @param request_options - Customize the options for this request
              */
          getTweetsComplianceStream: (params, request_options) => (0, request_1.stream)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/tweets/compliance/stream`,
            params,
            method: "GET"
          }),
          /**
              * Tweets Label stream
              *
          
              * Streams 100% of labeling events applied to Tweets
              * @param params - The params for getTweetsLabelStream
              * @param request_options - Customize the options for this request
              */
          getTweetsLabelStream: (params = {}, request_options) => (0, request_1.stream)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/tweets/label/stream`,
            params,
            method: "GET"
          }),
          /**
              * Users Compliance stream
              *
          
              * Streams 100% of compliance data for Users
              * @param params - The params for getUsersComplianceStream
              * @param request_options - Customize the options for this request
              */
          getUsersComplianceStream: (params, request_options) => (0, request_1.stream)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/compliance/stream`,
            params,
            method: "GET"
          })
        };
        this.general = {
          /**
              * Returns the OpenAPI Specification document.
              *
          
              * Full OpenAPI Specification in JSON format. (See https://github.com/OAI/OpenAPI-Specification/blob/master/README.md)
              * @param request_options - Customize the options for this request
              */
          getOpenApiSpec: (request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/openapi.json`,
            method: "GET"
          })
        };
        this.lists = {
          /**
              * Create List
              *
          
              * Creates a new List.
              * @param request_body - The request_body for listIdCreate
              * @param request_options - Customize the options for this request
              */
          listIdCreate: (request_body, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/lists`,
            request_body,
            method: "POST"
          }),
          /**
              * Delete List
              *
          
              * Delete a List that you own.
              * @param id - The ID of the List to delete.
              * @param request_options - Customize the options for this request
              */
          listIdDelete: (id, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/lists/${id}`,
            method: "DELETE"
          }),
          /**
              * List lookup by List ID.
              *
          
              * Returns a List.
              * @param id - The ID of the List.
              * @param params - The params for listIdGet
              * @param request_options - Customize the options for this request
              */
          listIdGet: (id, params = {}, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/lists/${id}`,
            params,
            method: "GET"
          }),
          /**
              * Update List.
              *
          
              * Update a List that you own.
              * @param id - The ID of the List to modify.
              * @param request_body - The request_body for listIdUpdate
              * @param request_options - Customize the options for this request
              */
          listIdUpdate: (id, request_body, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/lists/${id}`,
            request_body,
            method: "PUT"
          }),
          /**
              * Add a List member
              *
          
              * Causes a User to become a member of a List.
              * @param id - The ID of the List for which to add a member.
              * @param request_body - The request_body for listAddMember
              * @param request_options - Customize the options for this request
              */
          listAddMember: (id, request_body, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/lists/${id}/members`,
            request_body,
            method: "POST"
          }),
          /**
              * Remove a List member
              *
          
              * Causes a User to be removed from the members of a List.
              * @param id - The ID of the List to remove a member.
              * @param user_id - The ID of User that will be removed from the List.
              * @param request_options - Customize the options for this request
              */
          listRemoveMember: (id, user_id, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/lists/${id}/members/${user_id}`,
            method: "DELETE"
          }),
          /**
              * Get User's Followed Lists
              *
          
              * Returns a User's followed Lists.
              * @param id - The ID of the User to lookup.
              * @param params - The params for userFollowedLists
              * @param request_options - Customize the options for this request
              */
          userFollowedLists: (id, params = {}, request_options) => (0, request_1.paginate)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/${id}/followed_lists`,
            params,
            method: "GET"
          }),
          /**
              * Follow a List
              *
          
              * Causes a User to follow a List.
              * @param id - The ID of the authenticated source User that will follow the List.
              * @param request_body - The request_body for listUserFollow
              * @param request_options - Customize the options for this request
              */
          listUserFollow: (id, request_body, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/${id}/followed_lists`,
            request_body,
            method: "POST"
          }),
          /**
              * Unfollow a List
              *
          
              * Causes a User to unfollow a List.
              * @param id - The ID of the authenticated source User that will unfollow the List.
              * @param list_id - The ID of the List to unfollow.
              * @param request_options - Customize the options for this request
              */
          listUserUnfollow: (id, list_id, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/${id}/followed_lists/${list_id}`,
            method: "DELETE"
          }),
          /**
              * Get a User's List Memberships
              *
          
              * Get a User's List Memberships.
              * @param id - The ID of the User to lookup.
              * @param params - The params for getUserListMemberships
              * @param request_options - Customize the options for this request
              */
          getUserListMemberships: (id, params = {}, request_options) => (0, request_1.paginate)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/${id}/list_memberships`,
            params,
            method: "GET"
          }),
          /**
              * Get a User's Owned Lists.
              *
          
              * Get a User's Owned Lists.
              * @param id - The ID of the User to lookup.
              * @param params - The params for listUserOwnedLists
              * @param request_options - Customize the options for this request
              */
          listUserOwnedLists: (id, params = {}, request_options) => (0, request_1.paginate)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/${id}/owned_lists`,
            params,
            method: "GET"
          }),
          /**
              * Get a User's Pinned Lists
              *
          
              * Get a User's Pinned Lists.
              * @param id - The ID of the authenticated source User for whom to return results.
              * @param params - The params for listUserPinnedLists
              * @param request_options - Customize the options for this request
              */
          listUserPinnedLists: (id, params = {}, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/${id}/pinned_lists`,
            params,
            method: "GET"
          }),
          /**
              * Pin a List
              *
          
              * Causes a User to pin a List.
              * @param id - The ID of the authenticated source User that will pin the List.
              * @param request_body - The request_body for listUserPin
              * @param request_options - Customize the options for this request
              */
          listUserPin: (id, request_body, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/${id}/pinned_lists`,
            request_body,
            method: "POST"
          }),
          /**
              * Unpin a List
              *
          
              * Causes a User to remove a pinned List.
              * @param id - The ID of the authenticated source User for whom to return results.
              * @param list_id - The ID of the List to unpin.
              * @param request_options - Customize the options for this request
              */
          listUserUnpin: (id, list_id, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/${id}/pinned_lists/${list_id}`,
            method: "DELETE"
          })
        };
        this.spaces = {
          /**
              * Space lookup up Space IDs
              *
          
              * Returns a variety of information about the Spaces specified by the requested IDs
              * @param params - The params for findSpacesByIds
              * @param request_options - Customize the options for this request
              */
          findSpacesByIds: (params, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/spaces`,
            params,
            method: "GET"
          }),
          /**
              * Space lookup by their creators
              *
          
              * Returns a variety of information about the Spaces created by the provided User IDs
              * @param params - The params for findSpacesByCreatorIds
              * @param request_options - Customize the options for this request
              */
          findSpacesByCreatorIds: (params, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/spaces/by/creator_ids`,
            params,
            method: "GET"
          }),
          /**
              * Search for Spaces
              *
          
              * Returns Spaces that match the provided query.
              * @param params - The params for searchSpaces
              * @param request_options - Customize the options for this request
              */
          searchSpaces: (params, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/spaces/search`,
            params,
            method: "GET"
          }),
          /**
              * Space lookup by Space ID
              *
          
              * Returns a variety of information about the Space specified by the requested ID
              * @param id - The ID of the Space to be retrieved.
              * @param params - The params for findSpaceById
              * @param request_options - Customize the options for this request
              */
          findSpaceById: (id, params = {}, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/spaces/${id}`,
            params,
            method: "GET"
          }),
          /**
              * Retrieve the list of Users who purchased a ticket to the given space
              *
          
              * Retrieves the list of Users who purchased a ticket to the given space
              * @param id - The ID of the Space to be retrieved.
              * @param params - The params for spaceBuyers
              * @param request_options - Customize the options for this request
              */
          spaceBuyers: (id, params = {}, request_options) => (0, request_1.paginate)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/spaces/${id}/buyers`,
            params,
            method: "GET"
          }),
          /**
              * Retrieve Tweets from a Space.
              *
          
              * Retrieves Tweets shared in the specified Space.
              * @param id - The ID of the Space to be retrieved.
              * @param params - The params for spaceTweets
              * @param request_options - Customize the options for this request
              */
          spaceTweets: (id, params = {}, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/spaces/${id}/tweets`,
            params,
            method: "GET"
          })
        };
        this.tweets = {
          /**
              * List Tweets timeline by List ID.
              *
          
              * Returns a list of Tweets associated with the provided List ID.
              * @param id - The ID of the List.
              * @param params - The params for listsIdTweets
              * @param request_options - Customize the options for this request
              */
          listsIdTweets: (id, params = {}, request_options) => (0, request_1.paginate)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/lists/${id}/tweets`,
            params,
            method: "GET"
          }),
          /**
              * Tweet lookup by Tweet IDs
              *
          
              * Returns a variety of information about the Tweet specified by the requested ID.
              * @param params - The params for findTweetsById
              * @param request_options - Customize the options for this request
              */
          findTweetsById: (params, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/tweets`,
            params,
            method: "GET"
          }),
          /**
              * Creation of a Tweet
              *
          
              * Causes the User to create a Tweet under the authorized account.
              * @param request_body - The request_body for createTweet
              * @param request_options - Customize the options for this request
              */
          createTweet: (request_body, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/tweets`,
            request_body,
            method: "POST"
          }),
          /**
              * Full archive search counts
              *
          
              * Returns Tweet Counts that match a search query.
              * @param params - The params for tweetCountsFullArchiveSearch
              * @param request_options - Customize the options for this request
              */
          tweetCountsFullArchiveSearch: (params, request_options) => (0, request_1.paginate)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/tweets/counts/all`,
            params,
            method: "GET"
          }),
          /**
              * Recent search counts
              *
          
              * Returns Tweet Counts from the last 7 days that match a search query.
              * @param params - The params for tweetCountsRecentSearch
              * @param request_options - Customize the options for this request
              */
          tweetCountsRecentSearch: (params, request_options) => (0, request_1.paginate)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/tweets/counts/recent`,
            params,
            method: "GET"
          }),
          /**
              * Firehose stream
              *
          
              * Streams 100% of public Tweets.
              * @param params - The params for getTweetsFirehoseStream
              * @param request_options - Customize the options for this request
              */
          getTweetsFirehoseStream: (params, request_options) => (0, request_1.stream)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/tweets/firehose/stream`,
            params,
            method: "GET"
          }),
          /**
              * Sample stream
              *
          
              * Streams a deterministic 1% of public Tweets.
              * @param params - The params for sampleStream
              * @param request_options - Customize the options for this request
              */
          sampleStream: (params = {}, request_options) => (0, request_1.stream)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/tweets/sample/stream`,
            params,
            method: "GET"
          }),
          /**
              * Sample 10% stream
              *
          
              * Streams a deterministic 10% of public Tweets.
              * @param params - The params for getTweetsSample10Stream
              * @param request_options - Customize the options for this request
              */
          getTweetsSample10Stream: (params, request_options) => (0, request_1.stream)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/tweets/sample10/stream`,
            params,
            method: "GET"
          }),
          /**
              * Full-archive search
              *
          
              * Returns Tweets that match a search query.
              * @param params - The params for tweetsFullarchiveSearch
              * @param request_options - Customize the options for this request
              */
          tweetsFullarchiveSearch: (params, request_options) => (0, request_1.paginate)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/tweets/search/all`,
            params,
            method: "GET"
          }),
          /**
              * Recent search
              *
          
              * Returns Tweets from the last 7 days that match a search query.
              * @param params - The params for tweetsRecentSearch
              * @param request_options - Customize the options for this request
              */
          tweetsRecentSearch: (params, request_options) => (0, request_1.paginate)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/tweets/search/recent`,
            params,
            method: "GET"
          }),
          /**
              * Filtered stream
              *
          
              * Streams Tweets matching the stream's active rule set.
              * @param params - The params for searchStream
              * @param request_options - Customize the options for this request
              */
          searchStream: (params = {}, request_options) => (0, request_1.stream)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/tweets/search/stream`,
            params,
            method: "GET"
          }),
          /**
              * Rules lookup
              *
          
              * Returns rules from a User's active rule set. Users can fetch all of their rules or a subset, specified by the provided rule ids.
              * @param params - The params for getRules
              * @param request_options - Customize the options for this request
              */
          getRules: (params = {}, request_options) => (0, request_1.paginate)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/tweets/search/stream/rules`,
            params,
            method: "GET"
          }),
          /**
              * Add/Delete rules
              *
          
              * Add or delete rules from a User's active rule set. Users can provide unique, optionally tagged rules to add. Users can delete their entire rule set or a subset specified by rule ids or values.
              * @param params - The params for addOrDeleteRules
              * @param request_body - The request_body for addOrDeleteRules
              * @param request_options - Customize the options for this request
              */
          addOrDeleteRules: (request_body, params = {}, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/tweets/search/stream/rules`,
            params,
            request_body,
            method: "POST"
          }),
          /**
              * Tweet delete by Tweet ID
              *
          
              * Delete specified Tweet (in the path) by ID.
              * @param id - The ID of the Tweet to be deleted.
              * @param request_options - Customize the options for this request
              */
          deleteTweetById: (id, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/tweets/${id}`,
            method: "DELETE"
          }),
          /**
              * Tweet lookup by Tweet ID
              *
          
              * Returns a variety of information about the Tweet specified by the requested ID.
              * @param id - A single Tweet ID.
              * @param params - The params for findTweetById
              * @param request_options - Customize the options for this request
              */
          findTweetById: (id, params = {}, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/tweets/${id}`,
            params,
            method: "GET"
          }),
          /**
              * Retrieve Tweets that quote a Tweet.
              *
          
              * Returns a variety of information about each Tweet that quotes the Tweet specified by the requested ID.
              * @param id - A single Tweet ID.
              * @param params - The params for findTweetsThatQuoteATweet
              * @param request_options - Customize the options for this request
              */
          findTweetsThatQuoteATweet: (id, params = {}, request_options) => (0, request_1.paginate)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/tweets/${id}/quote_tweets`,
            params,
            method: "GET"
          }),
          /**
              * Hide replies
              *
          
              * Hides or unhides a reply to an owned conversation.
              * @param tweet_id - The ID of the reply that you want to hide or unhide.
              * @param request_body - The request_body for hideReplyById
              * @param request_options - Customize the options for this request
              */
          hideReplyById: (tweet_id, request_body, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/tweets/${tweet_id}/hidden`,
            request_body,
            method: "PUT"
          }),
          /**
              * Returns Tweet objects liked by the provided User ID
              *
          
              * Returns a list of Tweets liked by the provided User ID
              * @param id - The ID of the User to lookup.
              * @param params - The params for usersIdLikedTweets
              * @param request_options - Customize the options for this request
              */
          usersIdLikedTweets: (id, params = {}, request_options) => (0, request_1.paginate)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/${id}/liked_tweets`,
            params,
            method: "GET"
          }),
          /**
              * Causes the User (in the path) to like the specified Tweet
              *
          
              * Causes the User (in the path) to like the specified Tweet. The User in the path must match the User context authorizing the request.
              * @param id - The ID of the authenticated source User that is requesting to like the Tweet.
              * @param request_body - The request_body for usersIdLike
              * @param request_options - Customize the options for this request
              */
          usersIdLike: (id, request_body, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/${id}/likes`,
            request_body,
            method: "POST"
          }),
          /**
              * Causes the User (in the path) to unlike the specified Tweet
              *
          
              * Causes the User (in the path) to unlike the specified Tweet. The User must match the User context authorizing the request
              * @param id - The ID of the authenticated source User that is requesting to unlike the Tweet.
              * @param tweet_id - The ID of the Tweet that the User is requesting to unlike.
              * @param request_options - Customize the options for this request
              */
          usersIdUnlike: (id, tweet_id, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/${id}/likes/${tweet_id}`,
            method: "DELETE"
          }),
          /**
              * User mention timeline by User ID
              *
          
              * Returns Tweet objects that mention username associated to the provided User ID
              * @param id - The ID of the User to lookup.
              * @param params - The params for usersIdMentions
              * @param request_options - Customize the options for this request
              */
          usersIdMentions: (id, params = {}, request_options) => (0, request_1.paginate)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/${id}/mentions`,
            params,
            method: "GET"
          }),
          /**
              * Causes the User (in the path) to retweet the specified Tweet.
              *
          
              * Causes the User (in the path) to retweet the specified Tweet. The User in the path must match the User context authorizing the request.
              * @param id - The ID of the authenticated source User that is requesting to retweet the Tweet.
              * @param request_body - The request_body for usersIdRetweets
              * @param request_options - Customize the options for this request
              */
          usersIdRetweets: (id, request_body, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/${id}/retweets`,
            request_body,
            method: "POST"
          }),
          /**
              * Causes the User (in the path) to unretweet the specified Tweet
              *
          
              * Causes the User (in the path) to unretweet the specified Tweet. The User must match the User context authorizing the request
              * @param id - The ID of the authenticated source User that is requesting to retweet the Tweet.
              * @param source_tweet_id - The ID of the Tweet that the User is requesting to unretweet.
              * @param request_options - Customize the options for this request
              */
          usersIdUnretweets: (id, source_tweet_id, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/${id}/retweets/${source_tweet_id}`,
            method: "DELETE"
          }),
          /**
              * User home timeline by User ID
              *
          
              * Returns Tweet objects that appears in the provided User ID's home timeline
              * @param id - The ID of the authenticated source User to list Reverse Chronological Timeline Tweets of.
              * @param params - The params for usersIdTimeline
              * @param request_options - Customize the options for this request
              */
          usersIdTimeline: (id, params = {}, request_options) => (0, request_1.paginate)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/${id}/timelines/reverse_chronological`,
            params,
            method: "GET"
          }),
          /**
              * User Tweets timeline by User ID
              *
          
              * Returns a list of Tweets authored by the provided User ID
              * @param id - The ID of the User to lookup.
              * @param params - The params for usersIdTweets
              * @param request_options - Customize the options for this request
              */
          usersIdTweets: (id, params = {}, request_options) => (0, request_1.paginate)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/${id}/tweets`,
            params,
            method: "GET"
          })
        };
        this.users = {
          /**
              * Returns User objects that follow a List by the provided List ID
              *
          
              * Returns a list of Users that follow a List by the provided List ID
              * @param id - The ID of the List.
              * @param params - The params for listGetFollowers
              * @param request_options - Customize the options for this request
              */
          listGetFollowers: (id, params = {}, request_options) => (0, request_1.paginate)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/lists/${id}/followers`,
            params,
            method: "GET"
          }),
          /**
              * Returns User objects that are members of a List by the provided List ID.
              *
          
              * Returns a list of Users that are members of a List by the provided List ID.
              * @param id - The ID of the List.
              * @param params - The params for listGetMembers
              * @param request_options - Customize the options for this request
              */
          listGetMembers: (id, params = {}, request_options) => (0, request_1.paginate)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/lists/${id}/members`,
            params,
            method: "GET"
          }),
          /**
              * Returns User objects that have liked the provided Tweet ID
              *
          
              * Returns a list of Users that have liked the provided Tweet ID
              * @param id - A single Tweet ID.
              * @param params - The params for tweetsIdLikingUsers
              * @param request_options - Customize the options for this request
              */
          tweetsIdLikingUsers: (id, params = {}, request_options) => (0, request_1.paginate)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/tweets/${id}/liking_users`,
            params,
            method: "GET"
          }),
          /**
              * Returns User objects that have retweeted the provided Tweet ID
              *
          
              * Returns a list of Users that have retweeted the provided Tweet ID
              * @param id - A single Tweet ID.
              * @param params - The params for tweetsIdRetweetingUsers
              * @param request_options - Customize the options for this request
              */
          tweetsIdRetweetingUsers: (id, params = {}, request_options) => (0, request_1.paginate)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/tweets/${id}/retweeted_by`,
            params,
            method: "GET"
          }),
          /**
              * User lookup by IDs
              *
          
              * This endpoint returns information about Users. Specify Users by their ID.
              * @param params - The params for findUsersById
              * @param request_options - Customize the options for this request
              */
          findUsersById: (params, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users`,
            params,
            method: "GET"
          }),
          /**
              * User lookup by usernames
              *
          
              * This endpoint returns information about Users. Specify Users by their username.
              * @param params - The params for findUsersByUsername
              * @param request_options - Customize the options for this request
              */
          findUsersByUsername: (params, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/by`,
            params,
            method: "GET"
          }),
          /**
              * User lookup by username
              *
          
              * This endpoint returns information about a User. Specify User by username.
              * @param username - A username.
              * @param params - The params for findUserByUsername
              * @param request_options - Customize the options for this request
              */
          findUserByUsername: (username, params = {}, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/by/username/${username}`,
            params,
            method: "GET"
          }),
          /**
              * User lookup me
              *
          
              * This endpoint returns information about the requesting User.
              * @param params - The params for findMyUser
              * @param request_options - Customize the options for this request
              */
          findMyUser: (params = {}, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/me`,
            params,
            method: "GET"
          }),
          /**
              * User lookup by ID
              *
          
              * This endpoint returns information about a User. Specify User by ID.
              * @param id - The ID of the User to lookup.
              * @param params - The params for findUserById
              * @param request_options - Customize the options for this request
              */
          findUserById: (id, params = {}, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/${id}`,
            params,
            method: "GET"
          }),
          /**
              * Returns User objects that are blocked by provided User ID
              *
          
              * Returns a list of Users that are blocked by the provided User ID
              * @param id - The ID of the authenticated source User for whom to return results.
              * @param params - The params for usersIdBlocking
              * @param request_options - Customize the options for this request
              */
          usersIdBlocking: (id, params = {}, request_options) => (0, request_1.paginate)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/${id}/blocking`,
            params,
            method: "GET"
          }),
          /**
              * Block User by User ID
              *
          
              * Causes the User (in the path) to block the target User. The User (in the path) must match the User context authorizing the request
              * @param id - The ID of the authenticated source User that is requesting to block the target User.
              * @param request_body - The request_body for usersIdBlock
              * @param request_options - Customize the options for this request
              */
          usersIdBlock: (id, request_body, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/${id}/blocking`,
            request_body,
            method: "POST"
          }),
          /**
              * Followers by User ID
              *
          
              * Returns a list of Users who are followers of the specified User ID.
              * @param id - The ID of the User to lookup.
              * @param params - The params for usersIdFollowers
              * @param request_options - Customize the options for this request
              */
          usersIdFollowers: (id, params = {}, request_options) => (0, request_1.paginate)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/${id}/followers`,
            params,
            method: "GET"
          }),
          /**
              * Following by User ID
              *
          
              * Returns a list of Users that are being followed by the provided User ID
              * @param id - The ID of the User to lookup.
              * @param params - The params for usersIdFollowing
              * @param request_options - Customize the options for this request
              */
          usersIdFollowing: (id, params = {}, request_options) => (0, request_1.paginate)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/${id}/following`,
            params,
            method: "GET"
          }),
          /**
              * Follow User
              *
          
              * Causes the User(in the path) to follow, or “request to follow” for protected Users, the target User. The User(in the path) must match the User context authorizing the request
              * @param id - The ID of the authenticated source User that is requesting to follow the target User.
              * @param request_body - The request_body for usersIdFollow
              * @param request_options - Customize the options for this request
              */
          usersIdFollow: (id, request_body, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/${id}/following`,
            request_body,
            method: "POST"
          }),
          /**
              * Returns User objects that are muted by the provided User ID
              *
          
              * Returns a list of Users that are muted by the provided User ID
              * @param id - The ID of the authenticated source User for whom to return results.
              * @param params - The params for usersIdMuting
              * @param request_options - Customize the options for this request
              */
          usersIdMuting: (id, params = {}, request_options) => (0, request_1.paginate)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/${id}/muting`,
            params,
            method: "GET"
          }),
          /**
              * Mute User by User ID.
              *
          
              * Causes the User (in the path) to mute the target User. The User (in the path) must match the User context authorizing the request.
              * @param id - The ID of the authenticated source User that is requesting to mute the target User.
              * @param request_body - The request_body for usersIdMute
              * @param request_options - Customize the options for this request
              */
          usersIdMute: (id, request_body, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/${id}/muting`,
            request_body,
            method: "POST"
          }),
          /**
              * Unblock User by User ID
              *
          
              * Causes the source User to unblock the target User. The source User must match the User context authorizing the request
              * @param source_user_id - The ID of the authenticated source User that is requesting to unblock the target User.
              * @param target_user_id - The ID of the User that the source User is requesting to unblock.
              * @param request_options - Customize the options for this request
              */
          usersIdUnblock: (source_user_id, target_user_id, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/${source_user_id}/blocking/${target_user_id}`,
            method: "DELETE"
          }),
          /**
              * Unfollow User
              *
          
              * Causes the source User to unfollow the target User. The source User must match the User context authorizing the request
              * @param source_user_id - The ID of the authenticated source User that is requesting to unfollow the target User.
              * @param target_user_id - The ID of the User that the source User is requesting to unfollow.
              * @param request_options - Customize the options for this request
              */
          usersIdUnfollow: (source_user_id, target_user_id, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/${source_user_id}/following/${target_user_id}`,
            method: "DELETE"
          }),
          /**
              * Unmute User by User ID
              *
          
              * Causes the source User to unmute the target User. The source User must match the User context authorizing the request
              * @param source_user_id - The ID of the authenticated source User that is requesting to unmute the target User.
              * @param target_user_id - The ID of the User that the source User is requesting to unmute.
              * @param request_options - Customize the options for this request
              */
          usersIdUnmute: (source_user_id, target_user_id, request_options) => (0, request_1.rest)({
            auth: __classPrivateFieldGet(this, _Client_auth, "f"),
            ...__classPrivateFieldGet(this, _Client_defaultRequestOptions, "f"),
            ...request_options,
            endpoint: `/2/users/${source_user_id}/muting/${target_user_id}`,
            method: "DELETE"
          })
        };
        this.version = "1.2.1";
        this.twitterApiOpenApiVersion = "2.54";
        __classPrivateFieldSet(this, _Client_auth, typeof auth === "string" ? new auth_1.OAuth2Bearer(auth) : auth, "f");
        __classPrivateFieldSet(this, _Client_defaultRequestOptions, {
          ...requestOptions,
          headers: {
            "User-Agent": "twitter-api-typescript-sdk/" + this.version,
            ...requestOptions == null ? void 0 : requestOptions.headers
          }
        }, "f");
      }
    };
    exports.Client = Client;
    _Client_auth = /* @__PURE__ */ new WeakMap(), _Client_defaultRequestOptions = /* @__PURE__ */ new WeakMap();
  }
});

// node_modules/twitter-api-sdk/dist/index.js
var require_dist = __commonJS({
  "node_modules/twitter-api-sdk/dist/index.js"(exports) {
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = exports.Client = exports.types = exports.auth = void 0;
    exports.auth = __importStar(require_auth());
    exports.types = __importStar(require_types());
    var Client_1 = require_Client();
    Object.defineProperty(exports, "Client", { enumerable: true, get: function() {
      return Client_1.Client;
    } });
    var Client_2 = require_Client();
    Object.defineProperty(exports, "default", { enumerable: true, get: function() {
      return Client_2.Client;
    } });
  }
});
export default require_dist();
//# sourceMappingURL=twitter-api-sdk.js.map
