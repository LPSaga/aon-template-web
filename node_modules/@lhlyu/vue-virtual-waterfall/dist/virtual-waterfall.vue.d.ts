interface VirtualWaterfallOption {
    virtual?: boolean;
    rowKey?: string;
    gap?: number;
    padding?: number | string;
    preloadScreenCount?: [number, number];
    itemMinWidth?: number;
    maxColumnCount?: number;
    minColumnCount?: number;
    items?: any[];
    calcItemHeight?: (item: any, itemWidth: number) => number;
}
declare function __VLS_template(): Readonly<{
    default(props: {
        item: any;
        index: number;
    }): any;
}> & {
    default(props: {
        item: any;
        index: number;
    }): any;
};
declare const __VLS_component: import('vue').DefineComponent<import('vue').ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToOption<VirtualWaterfallOption>, {
    virtual: boolean;
    rowKey: string;
    gap: number;
    padding: number;
    preloadScreenCount: () => number[];
    itemMinWidth: number;
    maxColumnCount: number;
    minColumnCount: number;
    items: () => any[];
    calcItemHeight: (item: any, itemWidth: number) => 250;
}>>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
    virtual: boolean;
    rowKey: string;
    gap: number;
    padding: number | string;
    preloadScreenCount: [number, number];
    itemMinWidth: number;
    maxColumnCount: number;
    minColumnCount: number;
    items: any[];
    calcItemHeight: (item: any, itemWidth: number) => number;
} & {} & {}>, {
    virtual: boolean;
    rowKey: string;
    gap: number;
    padding: number | string;
    preloadScreenCount: [number, number];
    itemMinWidth: number;
    maxColumnCount: number;
    minColumnCount: number;
    items: any[];
    calcItemHeight: (item: any, itemWidth: number) => number;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, ReturnType<typeof __VLS_template>>;
export default _default;

type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToOption<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
